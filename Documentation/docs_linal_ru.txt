Документация "библиотеки" linal.h

В ней реализованы следующие классы:
* Matrix
* Vector
* Dekart_System

[ВМЕСТО double МОЖНО СОЗДАТЬ ШАБЛОННУЮ МАТРИЦУ И ВЕКТОР НУЖНОГО ВАМ ТИПА <T>]

Подробнее про каждый класс:

Класс, реализующий матрицы.
* Matrix:
	Зависит от: iostream, std::cout
	От него зависят: Vector, Dekart_System

	Поля (переменные):
		* double** data --- двумерный массив с элементами матрицы
		* unsigned int height --- высота (количество строк)
		* unsigned int width --- ширина (количество столбцов)

	Конструкторы:
		* ... Matrix(unsigned int height, unsigned int width) --- Матрица высотой "height" и шириной "width" заполненная нулями
		* ... Matrix(Matrix) --- Создать клон матрицы

	Методы:
		* clear() --- Заполнить матрицу нулями
		* getHeight() --- Получить высоту (так как переменная приватная)
		* getWidth() --- Получить ширину (так как переменная приватная)
		* getElement(unsigned int vert_ind, unsigned int horis_ind) --- Получить элемент строки "vert_ind" и столбца "horis_ind"
		* getElements() --- Получить все элементы матрицы в виде массива double* (массив линейный, т.е матрица преобразуется в одну строку)
		* getData() --- Получить все элементы матрицы в исходном виде, т.е в виде двумерного массива double**
		* getRow(unsigned int vert_ind) --- Получить строку с индексом "vert_ind".
		* getColumn(unsigned int horis_ind) --- Получить столбец с индексом "horis_ind".
		* changeElement(unsigned int vert_ind, unsigned int horis_ind) --- Изменить элемент строки "vert_ind" и столбца "horis_ind"
		* transpose() --- Транспонировать матрицу
		* getTranspositioned() --- Получить транспонированную матрицу
		* getMinor(unsigned int vert_ind, unsigned int horis_ind) --- Получить минорную матрицу (т.е матрицу, полученную вычеркивание строки "vert_ind" и столбца "horis_ind" из исходной матрицы)
		* getDeterminant() --- Получить детерминант
		* getAdjugated() --- Получить союзную матрицу, т.е матрицу составленную из алгебраических дополнений исходной матрицы (и транспонированной после)
		* invert() --- Инвертировать матрицу, т.е превратить в обратную исходной
		* getInverted() --- Получить обратную матрицу
		* print() --- Вывести на экран консоли матрицу в привычном виде (часто выводит не особо хорошо, но вполне достаточно для отладки)
		* fill(double value) --- Заполнить матрицу значением "value"
		* static sum(Matrix*, Matrix*) --- Получить сумму двух матриц
		* static subtract(Matrix, Matrix) --- Получить разность двух матриц
		* static multiply(Matrix, Matrix) --- Получить произведение двух матриц
		* static multiply(Matrix, double) --- Получить произведение матрицы с числом
		* static divide(Matrix, double) --- Получить частное матрицы с числом

	Перегруженные операторы:
		* =(Matrix) --- Оператор копирования позволяет копировать матрицу влево
		* +(Matrix) --- Позволяет суммировать матрицы
		* +=(Matrix) --- Позволяет просуммировать текущую матрицу с другой.
		* -(Matrix) --- Позволяет вычитать матрицы
		* -=(Matrix) --- Позволяет вычитать текущую матрицу с другой.
		* *(Matrix) --- Позволяет умножать матрицы
		* *(double) --- Позволяет умножить матрицу на число
		* *=(double) --- Позволяет умножить текущую матрицу на число
		* /(double) --- Позволяет делить матрицу на число
		* /=(double) --- Позволяет делить текущую матрицу на число
		* ==(Matrix) --- Позволяет сравнить две матрицы на равенство
		* <<(std::ostream& os, Matrix) --- Позволяет выводить матрицу в консоль в "привычном" стиле
		

Класс, реализующий вектора.
Двоеточие означает, что Vector наследует Matrix
* Vector : Matrix:
	Зависит от: iostream, cmath, std::cout, Matrix
	От него зависят: Dekart_System

	Поля (переменные):
		* unsigned int dimension --- Измерение, т.е количество строк (столбец у вектора всегда один)

	Конструкторы:
		* ... Vector(unsigned int dimension) --- Создание вектора с измерением/высотой "dimension"
		* ... Vector(unsigned int dimension, double* coords) --- Создание вектора с измерением "dimension" и координатами "coords"
		* ... Vector(Matrix) --- Создать вектор на основе матрицы
		* ... Vector(Vector) --- Создать клон вектора

	Методы:
		* getDimension() --- Получить измерение
		* getMatrix() --- Получить вектор в виде матрицы
		* getModule() --- Получить модуль/длину вектора
		* static sum(Vector, Vector) --- Получить сумму двух векторов
		* static subtract(Vector, Vector) --- Получить разность двух векторов
		* static multiply(Vector, double) --- Получить произведение вектора на число
		* static divide(Vector, double) --- Получить частное вектора и числа
		* static scalar_multiply(Vector, Vector) --- Получить скалярное произведение двух векторов (ВЫЧИСЛЯЕТ ТОЛЬКО В ПДСК)
		* static vector_multiply(Vector*, Vector*) --- Получить векторное произведение двух векторов (ВЫЧИСЛЯЕТ ТОЛЬКО В ПДСК И РАБОТАЕТ ТОЛЬКО С 3-МЕРНЫМИ ВЕКТОРАМИ)
	
	Перегруженные операторы:
		* =(Vector) --- Оператор копирования позволяет копировать вектор влево
		* +=(Vector) --- Позволяет просуммировать текущий вектор с другим
		* -=(Vector) --- Позволяет вычесть текущий вектор с другим
		* *=(double) --- Позволяет умножить текущий вектор на число
		* /=(double) --- Позволяет поделить текущий вектор на число
		* +(Vector) --- Позволяет суммировать вектора
		* -(Vector) --- Позволяет вычитать вектора
		* *(double) --- Позволяет умножать вектор на число
		* /(double) --- Позволяет делить вектор на число
		* ==(Vector) --- Оператор сравнения векторов, равны, когда одинаковы по содержанию
		* !=(Vector) --- Оператор сравнения векторов, не равны, когда не одинаковы по содержанию
		* <(Vector) --- Оператор <, сравнивается по модулю
		* <(Vector) --- Оператор >, сравнивается по модулю
		* <=(Vector) --- Оператор <=, сравнивается по модулю
		* <=(Vector) --- Оператор >=, сравнивается по модулю
		* <<(std::ostream& os, Vector) --- Позволяет выводить матрицу в консоль в "привычном" стиле (как строку)
		* >>(std::istream& is, Vector) --- Позволяет вводить данные в вектор, в привычном стиле
